// Common gradle configuration between offline and online build.
// This file can not be run by itself either run build.gradle or build-offline.gradle .

defaultTasks 'clean', 'assemble', 'test'

//    METADATA
// ==============
version = '1.1.0-SNAPSHOT'
description = 'Xenon: a middleware abstraction library that provides a simple programming interface to various compute and storage resources.'

// will generate a warning with JDK 8, since the runtime jar (rt.jar) of
// Java 7 is not available. Could configure gradle wrapper for this
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

//  DEPENDENCIES
// ==============

//Get dependencies from Maven central repository, from JCenter and then locally
repositories {
    mavenCentral()
    jcenter()
    // TODO lib/test, could interfere with main sourceset. eg junit.jar in distribution
    flatDir { dirs 'lib', 'lib/test' }
}

ext.jschVersion = '0.1.50'
ext.apacheCommonsNetVersion = '3.3'

// PROJECT DIRECTORIES
// ==============
sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }
    examples
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    // Xenon dependencies.
    // xenon/lib/**/*.jar to ./lib/
    compile group: 'com.jcraft', name: 'jsch', version: jschVersion
    compile group: 'commons-net', name: 'commons-net', version: apacheCommonsNetVersion
    compile group: 'com.google.code.findbugs', name: 'findbugs', version: '2.0.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'

    // Runtime dependencies
    runtime group: 'ch.qos.logback', name: 'logback-core', version: '1.0.11'
    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.11'

    // Testing dependencies
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
    integrationTestCompile group: 'junit', name: 'junit', version: '4.11'
    integrationTestCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'

    examplesCompile sourceSets.main.output
}

//     DOCUMENT
// ==============
javadoc {
    exclude 'nl/esciencecenter/xenon/engine/**', 'nl/esciencecenter/xenon/adaptors/**'

    // FIXME: remove me when all Javadoc warnings by Java 8 have been resolved
    failOnError = false
    options.overview = file("${buildDir}/overview.html")
}

task javadocDevel(type: Javadoc) {
    description 'Generates Javadoc API documentation for the main source code for Xenon developers.'
    group 'Documentation'
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    title = javadoc.title + ' for Xenon developers'
    destinationDir = file("${project.docsDir}/javadoc-devel")
    options.showFromPrivate()

    // FIXME: remove me when all Javadoc warnings by Java 8 have been resolved
    failOnError = false
}


task adaptorDocumentation(type: JavaExec) {
    description 'Generate Markdown adaptor appendix'
    group 'documentation'
    main = 'nl.esciencecenter.xenon.util.AdaptorDocGenerator'
    // TODO adaptors.md is made in wrong dir (build/), change builddir to build/docs/userguide, docs/userguide dir must be created before
    File output = file("${buildDir}/overview.html")
    args = [output]
    classpath = sourceSets.main.runtimeClasspath
    outputs.file output
}
javadoc.dependsOn adaptorDocumentation

class ConcatFiles extends DefaultTask {
    @InputFiles
    FileCollection files
    @OutputFile
    File target
    @TaskAction
    void concat() {
        target.withWriter { writer ->
            files.each { file ->
                file.withReader { reader ->
                    writer << reader << '\n'
                }
            }
        }
    }
}

task userguideMarkdown(type: ConcatFiles, dependsOn: adaptorDocumentation) {
    description 'Concatenate userguide_src.md and adaptor appendix into userguid.md'
    group 'documentation'
    files = files('doc/user/userguide/userguide_src.md', "${buildDir}/overview.html")
    target = file('doc/user/userguide/userguide.md')
    inputs.files files
    outputs.file target
}

task checkPandocPresence(type:Exec) {
    executable 'pandoc'
    args = ['-v']
    standardOutput = new ByteArrayOutputStream()
}

task userguidePdf(type:Exec, dependsOn: [checkPandocPresence, userguideMarkdown]) {
    description 'Convert markdown to pdf (requires pandoc and texlive)'
    group 'documentation'
    workingDir 'doc/user/userguide'
    executable 'pandoc'
    File output = file('doc/user/userguide/userguide.pdf')
    inputs.file userguideMarkdown.target
    outputs.file output
    args = [userguideMarkdown.target, '-o', output]
}

//     TEST
// ==============

//Create the task that runs the integration tests found from the
//configured source directory and uses the correct classpath.
task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    //Ensure that integration tests are run every time when you invoke this task
    outputs.upToDateWhen { false }
}

//Ensure that our unit tests are run before our integration tests
integrationTest.mustRunAfter test

//Ensure that the HTML reports of unit and integration tests are written to different directories.
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
    reports.junitXml.destination = file("${project.buildDir}/${name}-results")
}

//    PACKAGE
// ==============
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task examplesJar(type: Jar) {
    classifier = 'examples'
    from sourceSets.examples.output
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// TODO Distributions:
// 1. for maven, xenon.jar, xenon-src.jar, xenon-javadoc.jar
// 2. minimal, xenon.jar + deps*.jar
// 3. full, xenon.jar + deps*.jar + javadoc + examples + javadocdevel + unit tests +  integration tests

distributions {
    main {
        contents {
            def jar = project.tasks[JavaPlugin.JAR_TASK_NAME]
            into("lib") {
                from(jar)
                from(project.configurations.runtime)
            }
            into("docs") {
                from(userguideMarkdown.target)
                from('doc/user/userguide/userguide.pdf')
                into("javadoc") {
                    from(javadoc.destinationDir)
                }
                from(sourcesJar)
            }
            from {
                ['README.md',
                'LICENSE',
                'NOTICE',
                'notices'
                ]
            }
            into('examples') {
                from('src/examples')
                // TODO would like to have example source code in examples/src/main/java, but it is in examples/java, rename did not work
                from(examplesJar)
            }
        }
    }
}
distZip.dependsOn javadoc, userguidePdf
distTar.dependsOn javadoc, userguidePdf
installDist.dependsOn javadoc, userguidePdf

//     PUBLISH
// ==============
publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId 'nl.esciencecenter.xenon'
            artifactId 'xenon'
            version version

            artifact sourcesJar
            artifact javadocJar
        }
    }
}

task wrapper(type: Wrapper) {
    description 'Generates gradle wrapper'
    group 'Build Setup'
    gradleVersion = '2.7'
}
