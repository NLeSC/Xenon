// Common gradle configuration between offline and online build.
// This file can not be run by itself either run build.gradle or build-offline.gradle .

defaultTasks 'clean', 'assemble', 'test'

//    METADATA
// ==============
version = '2.0.0'
description = 'Xenon: a middleware abstraction library that provides a simple programming interface to various compute and storage resources.'

// will generate a warning with JDK 8, since the runtime jar (rt.jar) of
// Java 7 is not available. Could configure gradle wrapper for this
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// PROJECT DIRECTORIES
// ==============
ext.compileLibDir = file('lib')
ext.runtimeLibDir = file('lib/runtime')
ext.testLibDir = file('lib/test')
ext.codestyleLibDir = file('lib/codestyle')

testSets {
    integrationTest
    liveTest {
        options {
            // Pass all -D arguments from gradlew to tests
            systemProperties(System.getProperties())
        }
    }
    fixedClientEnvironmentTest
}
liveTest.description = 'Runs the integration tests against live systems'
integrationTest.description = 'Run the integration tests against docker containers'
fixedClientEnvironmentTest.description = 'Run the integration tests within and against docker containers'

apply from: 'gradle/documentation.gradle'
apply from: 'gradle/distribution.gradle'
apply from: 'gradle/docker.gradle'

//     TEST
// ==============

// Never up to date, can not verify same config/props/remote is used second time
liveTest.outputs.upToDateWhen {
    // TODO cache liveTest arguments for example `./gradlew liveTest -Dscheduler=slurm -Dlocation=das5.vu.nl -Dcredential=default DpropertiesFile=slurm-das5.props`
    // then cache `-Dscheduler=slurm -Dlocation=das5.vu.nl -Dcredential=default DpropertiesFile=slurm-das5.props` when liveTest is run with same arguments return true.
    false
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test
integrationTest.dependsOn checkDockerComposePresence
fixedClientEnvironmentTest.dependsOn checkDockerComposePresence

// See progress of tests
tasks.withType(Test) {
    // TODO only verbose logging on when CI environment var is set, because on CI we can't look at html test reports
    testLogging {
        events 'started', 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
        showStackTraces true
    }
}

task wrapper(type: Wrapper) {
    description 'Generates gradle wrapper'
    group 'Build Setup'
    gradleVersion = '2.9'
}

cleanIdeaWorkspace.group = 'IDE'
cleanIdeaWorkspace.description = 'Removes the IDEA workspace file'

