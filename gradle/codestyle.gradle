// Check coding style with spotless
// Depends on plugins:
//    id "com.diffplug.gradle.spotless" version "3.4.1"

spotless {
	java {
		trimTrailingWhitespace()
		indentWithSpaces(4)
		endWithNewline()
		removeUnusedImports() 

		replace      'Not enough space after if', 'if(', 'if ('
		replaceRegex 'Too much space after if', 'if +\\(', 'if ('

		replace      'Not enough space after for', 'for(', 'for ('
		replaceRegex 'Too much space after for', 'for +\\(', 'for ('

		replace      'Not enough space after while', 'while(', 'while ('
		replaceRegex 'Too much space after while', 'while +\\(', 'while ('

		replace      'Not enough space after try', 'try{', 'try {'
		replaceRegex 'Too much space after try', 'try +\\{', 'try {'

		replace      'Not enough space between brackets', '){', ') {'

//		licenseHeader '/* Licensed under Apache-2.0 */'	// License header
//		licenseHeaderFile 'spotless.license.java'		// License header file

		// Obviously, you can't specify both licenseHeader and licenseHeaderFile at the same time
//		importOrder 'java', 'javax', 'org', 'com', 'com.diffplug', ''	// A sequence of package names
//		importOrderFile 'spotless.importorder'				// An import ordering file, exported from Eclipse

//		eclipse().configFile 'spotless.eclipseformat.xml'	// XML file dumped out by the Eclipse formatter
		// If you have Eclipse preference or property files, you can use them too.
	}
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarqube.com'
        property 'sonar.organization', 'nlesc'
        property 'sonar.projectKey', 'nlesc:Xenon'
        property 'sonar.projectName', 'Xenon'
        property 'sonar.language', 'java'
        property 'sonar.links.homepage', 'https://github.com/NLeSC/Xenon'
        property 'sonar.links.scm', 'https://github.com/NLeSC/Xenon'
        property 'sonar.links.issue', 'https://github.com/NLeSC/Xenon/issues'
        property 'sonar.links.ci', 'https://travis-ci.org/NLeSC/Xenon'
        properties['sonar.tests'] += sourceSets.integrationTest.allSource.srcDirs
        properties['sonar.tests'] += sourceSets.fixedClientEnvironmentTest.allSource.srcDirs
        properties['sonar.java.test.binaries'] += sourceSets.integrationTest.output.classesDirs
        properties['sonar.java.test.binaries'] += sourceSets.fixedClientEnvironmentTest.output.classesDirs
        property "sonar.junit.reportsPath", "build/test-results"
        property 'sonar.jacoco.reportPaths', [jacocoTestReport.executionData, jacocoIntegrationTestReport.executionData, jacocoFixedClientEnvironmentTestReport.executionData]
    }
}