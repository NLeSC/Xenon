// Images: directories needed for integration tests
// LinkedHashMap, so the keySet order is fixed
ext.dockerDirectories = [
    'alpine-base': 'xenon-alpine-base',
    'phusion-base': 'xenon-phusion-base',
    'ftp': 'xenon-ftp',
    'gridengine': 'xenon-gridengine',
    'gridengine-exec': 'xenon-gridengine-exec',
    'gridftp-ca': 'xenon-gridftp/ca',
    'gridftp': 'xenon-gridftp',
    'slurm': 'xenon-slurm',
    'ssh': 'xenon-ssh',
    'torque': 'xenon-torque' ,
    'webdav': 'xenon-webdav',
    'test': '.'
]
ext.dockerImages = ext.dockerDirectories.keySet()
// Filter images according to *ftp or *grid*
if (project.hasProperty("docker.filter")) {
    def filter = project.property("docker.filter")
    // Wildcard syntax
    filter = filter.replaceAll(/\*/, ".*").replaceAll(/\?/, ".?")
    ext.dockerImages = ext.dockerImages.findAll { it =~ filter }
}

ext.dockerDir = 'src/integrationTest/docker'

// UID in docker image
ext.dockerUid = '1000'
if (project.hasProperty('docker.uid')) {
    ext.dockerUid = project.property('docker.uid')
}

ext.dockerCacheContainerName = 'xenon-test-cache-' + (java.util.UUID.randomUUID() as String)

//  DOCKER COMPOSE
// ================

task checkDockerComposePresence(type: Exec) {
    executable 'docker-compose'
    args = ['-v']
    standardOutput = new ByteArrayOutputStream()
}

class DockerCompose extends Exec {
    def DockerCompose() {
        workingDir project.ext.dockerDir
        executable 'docker-compose'
        dependsOn project.tasks.checkDockerComposePresence
    }
}

task dockerKill(type: DockerCompose) {
    args = ['kill']
}

task dockerCleanup(type: DockerCompose, dependsOn: dockerKill) {
    args = ['rm', '-f']
}

task dockerIntegrationTest(type: DockerCompose, dependsOn: 'dockerTestCache') {
    // FIXME: the current version of docker-compose 1.4.2 does not
    // forward stdout if running from gradle (without TTY). Check if
    // future versions support this.
    args = ['run', '--rm', '-e', 'MYUID=' + dockerUid, 'xenon-test']
    if (project.hasProperty('docker.tests')) {
        args += ['./gradlew', 'integrationTest', '--tests', "'" + project.property('docker.tests') + "'"]
    }
    finalizedBy 'dockerCleanup'
    mustRunAfter 'test'
}

//  DOCKER BUILD SETUP
// ====================

def dockerImageRequirementsSpec = copySpec { 
    from('src/integrationTest/resources/scripts') {
        include 'create_symlinks'
    }
    from(dockerDir) {
        include 'insecure-ssh-keys'
    }
}
task dockerCopyAlpineRequirements(type: Copy) {
    with dockerImageRequirementsSpec
    into dockerDir + '/xenon-alpine-base'
}
task dockerCopyPhusionRequirements(type: Copy) {
    with dockerImageRequirementsSpec
    into dockerDir + '/xenon-phusion-base'
}
task dockerCopyTorqueRequirements(type: Copy) {
    with dockerImageRequirementsSpec
    into dockerDir + '/xenon-torque'
}

task dockerCopyRequirements(dependsOn: [dockerCopyAlpineRequirements, dockerCopyPhusionRequirements, dockerCopyTorqueRequirements]) {}

task dockerCACertificates(type: Exec) {
    def generatedCAFiles = file(dockerDir + '/xenon-gridftp/files')
    onlyIf {
        !generatedCAFiles.exists()
    }
    workingDir dockerDir
    def volumes = generatedCAFiles.absolutePath + ':/var/lib/globus'
    commandLine 'docker', 'run', '-t', '--rm=true',
                 '-e', 'MYUID=' + dockerUid, '-v', volumes,
                 'nlesc/xenon-gridftp-ca'
}

//  DOCKER BUILD
// ==============

task dockerTestCache(dependsOn: checkDockerComposePresence) {
    def testCacheSet = file('.docker-test-cache-set')
    onlyIf {
        !testCacheSet.exists()
    }
    doLast {
        exec {
            workingDir dockerDir
            commandLine 'docker', 'run', '-e', 'MYUID=' + dockerUid,
                '--name=' + dockerCacheContainerName, '-v', "$projectDir:/code",
                'nlesc/xenon-test', './gradlew', '--project-cache-dir',
                '/home/xenon/gradle-cache', 'compileJava', 'compileTestJava'
        }
        exec {
            workingDir dockerDir
            commandLine 'docker', 'commit', dockerCacheContainerName,
                'nlesc/xenon-test'
        }
        exec {
            commandLine 'touch', testCacheSet.absolutePath
        }
    }
    finalizedBy 'dockerTestCacheCleanup'
}
task dockerTestCacheCleanup(type: Exec) {
    onlyIf {
        !dockerTestCache.state.skipped
    }
    workingDir dockerDir
    commandLine 'docker', 'rm', dockerCacheContainerName
}

task dockerBuild(dependsOn: [checkDockerComposePresence, dockerCopyRequirements, dockerCACertificates]) << {
    println "Building docker images for: " + dockerImages
    dockerImages.each { image ->
        exec {
            workingDir dockerDir
            commandLine 'docker', 'build', '-t', 'nlesc/xenon-' + image, dockerDirectories[image]
        }
    }
}

task dockerPush(dependsOn: checkDockerComposePresence) << {
    println "Pushing docker images of: " + dockerImages
    dockerImages.each { image ->
        exec {
            workingDir dockerDir
            commandLine 'docker', 'push', 'nlesc/xenon-' + image
        }
    }
}
