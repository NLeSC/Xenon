//    PLUGINS
// ==============
plugins {
    id 'java'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.2'
    id 'jacoco'
    id 'org.hidetake.ssh' version '1.1.3'
}

defaultTasks 'clean', 'assemble', 'test'

//    METADATA
// ==============
version = '1.1.0-SNAPSHOT'
description = 'Xenon: a middleware abstraction library that provides a simple programming interface to various compute and storage resources.'

// will generate a warning with JDK 8, since the runtime jar (rt.jar) of
// Java 7 is not available. Could configure gradle wrapper for this
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

//  DEPENDENCIES
// ==============

//Get dependencies from Maven central repository, from JCenter and then locally
repositories {
    mavenCentral()
    jcenter()
    flatDir { dirs 'lib', 'lib/cog-jglobus' }
}

ext.cogJglobusVersion = '1.8.0'
ext.jschVersion = '0.1.50'
ext.apacheCommonsNetVersion = '3.3'

dependencies {
    // Xenon dependencies. downloadJGlobus task (below) downloads
    // xenon/lib/**/*.jar to ./lib/
    compile group: 'com.jcraft', name: 'jsch', version: jschVersion
    compile group: 'commons-net', name: 'commons-net', version: apacheCommonsNetVersion
    compile group: 'com.google.code.findbugs', name: 'findbugs', version: '2.0.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'
    compile module(group: 'org.jglobus', name: 'cog-jglobus', version: cogJglobusVersion) {
        dependency group: 'org.jglobus', name: 'cog-jobmanager', version: cogJglobusVersion
        dependency group: 'org.jglobus', name: 'cog-url', version: cogJglobusVersion
        dependency group: 'commons-logging', name: 'commons-logging', version: '1.1'
        dependency group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.3', transitive: true
        dependency group: 'cryptix', name: 'cryptix-asn1'
        dependency group: 'cryptix', name: 'cryptix'
        dependency group: 'cryptix', name: 'cryptix32'
        dependency group: 'org.bountycastle', name: 'jce-jdk13', version: '131'
        dependency group: 'org.ietf', name: 'jgss'
        dependency group: 'com.claymoresystems', name: 'puretls', version: '0.9b4'
    }

    // Runtime dependencies
    runtime group: 'ch.qos.logback', name: 'logback-core', version: '1.0.11'
    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.11'

    // Testing dependencies
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
}

// PROJECT DIRECTORIES
// ==============
sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test/src'
            exclude 'nl/esciencecenter/xenon/integration/**'
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir 'test/src'
            include 'nl/esciencecenter/xenon/integration/**'
        }
        resources.srcDir file('test/fixtures')
    }
    userguide {
        java {
            srcDir 'doc/userguide/src'
        }
    }
}

//     DOCUMENT
// ==============
javadoc {
    exclude 'nl/esciencecenter/xenon/engine/**', 'nl/esciencecenter/xenon/adaptors/**'

    // FIXME: remove me when all Javadoc warnings by Java 8 have been resolved
    failOnError = false
}

task javadocDevel(type: Javadoc) {
    source = sourceSets.main.allJava
    destinationDir = file("${project.docsDir}/javadoc-devel")
    options.showFromPrivate()

    // FIXME: remove me when all Javadoc warnings by Java 8 have been resolved
    failOnError = false
}


//     TEST
// ==============
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task prepareIntegrationTest << {
    file('test/xenon.test.properties').withReader { reader ->
        def userProps = new Properties()
        userProps.load(reader)

        // Initialize testing symlinks locally
        exec {
            executable = '/bin/bash'
            args = ['test/scripts/create_symlinks']
        }

        // Initialize testing symlinks on remote side
        ssh.run {
            session(host: userProps.getProperty("test.ssh.location"),
                    user: userProps.getProperty("test.ssh.user"),
                    password: userProps.getProperty("test.ssh.password")) {
                shell interaction: {
                    file('test/scripts/create_symlinks').withInputStream { stream ->
                        standardInput << stream << '\n' << 'exit 0' << '\n'
                    }
                }
            }
        }
    }
}

check.dependsOn integrationTest
integrationTest.dependsOn prepareIntegrationTest
integrationTest.mustRunAfter test

//    PACKAGE
// ==============
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

//     PUBLISH
// ==============
publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId 'nl.esciencecenter.xenon'
            artifactId 'xenon'
            version version

            artifact sourcesJar
            artifact javadocJar
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    pkg {
        repo = 'xenon'
        name = 'xenon'
        desc = description
        userOrg = 'nlesc'
        licenses = ['Apache-2.0']
        websiteUrl = 'https://nlesc.github.io/Xenon'
        vcsUrl = 'https://github.com/NLeSC/Xenon.git'
        issueTrackerUrl = 'https://github.com/NLeSC/Xenon/issues'
    }
    publications = ['MyPublication']
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}
